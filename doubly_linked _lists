#include<stdio.h>
#include<stdlib.h>
struct dll
{
        int data;
        struct dll *left,*right;
};
typedef struct dll node;
node *create(node *first)
{
        node *new,*prev;
        int x;
        printf("enter x value(enter -1 to stop)");
        scanf("%d",&x);
        while(x!=-1)
        {
                new=(node *)malloc(sizeof(node));
                new->data=x;
                new->left=new->right=NULL;
                if(first==NULL)
                {
                        first=new;
                        prev=new;
                }
                else
                {
                        prev->right=new;
                        new->left=prev;
                        prev=new;
                }
                                printf("enter x value(enter -1 to stop)");
                scanf("%d",&x);
        }
        return first;
}
void display(node *first)
{
        node *temp=first;
        if(first==NULL)
        {
                printf("no list to print");
        }
        else
        {
                printf("NULL");
                while(temp!=NULL)
                {
                        printf("<-|%d|->",temp->data);
                        temp=temp->right;
                }
                printf("NULL");
        }
}
int count(node *first)
{
        int c=0;
        node *temp=first;
        while(temp!=NULL)
        {
                c++;
                                temp=temp->right;
        }
        return c;
}
void search(node *first,int x)
{
        node *temp=first;
        int flag=0;
        while(temp!=NULL)
        {
                if(temp->data==x)
                {
                        flag=1;
                        break;
                }
                else
                {
                        temp=temp->right;
                }
        }
        if(flag==1)
        {
                printf("%d ele is found",x);
        }
        else
        {
                printf("%d ele is not found",x);
        }
}
node *insert_begin(node *first,int x)
{
        node *new;
        new=(node *)malloc(sizeof(node));
        new->data=x;
        new->right=new->left=NULL;
        if(first==NULL)
        {
                first=new;
        }
        else
        {
                new->right=first;
                first->left=new;
                first=new;

        }
        return first;
}
node *insert_end(node *first,int x)
{
        node *new,*temp=first;
        new=(node *)malloc(sizeof(node));
        new->data=x;
        new->right=new->left=NULL;
        if(first==NULL)
        {
                first=new;
        }
        else
        {
                        while(temp->right!=NULL)
                {
                        temp=temp->right;
                }
                temp->right=new;
                new->left=temp;
        }
        return first;
}
node *insert_pos(node *first,int pos,int x)
{
        node *new,*temp=first;
        int n,i;
        n=count(first);
        if(pos>1 && pos<n)
        {
                new=(node *)malloc(sizeof(node));
                new->data=x;
                new->right=new->left=NULL;
                if(first==NULL)
                {
                        first=new;
                }
                else
                {
                        for(i=1;i<pos-1;i++)
                        {
                                temp=temp->right;
                        }
                                                new->right=temp->right;
                        new->left=temp;
                        temp->right=new;
                        new->right->left=new;
                }
        }
        return first;
}
node *delete(node *first,int x)
{
        node *temp;
        int flag=0;
        if(first==NULL)
        {
                printf("no ele to print");
        }
        else if(first->data==x)
        {
                temp=first;
                first=first->right;
                if(first!=NULL)
                        first->left=NULL;
                free(temp);
        }
        else
        {
                temp=first;
                while(temp!=NULL)
                {
                        if(temp->data==x)
                                                {
                                flag=1;
                                break;
                        }
                        else
                        {
                                temp=temp->right;
                        }
                }
        }
        if(flag==1)
        {
                if(temp->right==NULL)
                {
                        temp->left->right=NULL;
                        free(temp);
                }
                else
                {
                        temp->right->left=temp->left;
                        temp->left->right=temp->right;
                        free(temp);
                }
        }
        else
        {
                printf("ele is not found");
        }
        return first;
}
void sort(node *first)
{
        node *temp1,*temp2;
        int x;
        for(temp1=first;temp1->right!=NULL;temp1=temp1->right)
        {
                for(temp2=temp1->right;temp2!=NULL;temp2=temp2->right)
                {
                        if(temp1->data>temp2->data)
                        {
                                x=temp1->data;
                                temp1->data=temp2->data;
                                temp2->data=x;
                        }
                }
        }
}
node *reverse(node *first)
{
        node *present=first,*prev=NULL,*save;
        while(present!=NULL)
        {
                save=present->right;
              present->right=prev;
                prev=present;
                present=save;
        }
        return prev;
}
int main()
{
        node *head=NULL;
        int n,x,pos,ch;
        head=create(head);
        printf("1:display\n 2:count\n 3:search\n 4:insert_begin\n 5:insert_end\n");
        printf("6:insert_pos\n 7:delete\n 8:sort\n 9:reverse\n 10:exit\n");
        while(1)
        {
                printf("enter choice");
                scanf("%d",&ch);
                switch(ch)
                {
                        case 1:display(head);
                               break;
                        case 2:n=count(head);
                               printf("no.of nodes are %d",n);
                               break;
                        case 3:printf("enter ele to be searched");
                               scanf("%d",&x);
                               search(head,x);
                               break;
                        case 4:printf("enter ele to be inserted");
                               scanf("%d",&x);
                               head=insert_begin(head,x);
                               display(head);
                               break;
                        case 5:printf("enter ele to be inserted");
                               scanf("%d",&x);
                               head=insert_end(head,x);
                               display(head);
                                              break;
          case 6:printf("enter ele to be inserted");
               scanf("%d",&x);
               printf("enter pos to be inserted");
               scanf("%d",&pos);
               head=insert_pos(head,pos,x);
               display(head);
               break;
        case 7:printf("enter ele to be deleted");
               scanf("%d",&x);
               head=delete(head,x);
               display(head);
               break;
        case 8:sort(head);
               display(head);
               break;
        case 9:head=reverse(head);
               display(head);
               break;
        case 10:exit(0);
                break;
        default:printf("check choice");
        }
        }
        }
        output:
enter x value(enter -1 to stop)10
enter x value(enter -1 to stop)20
enter x value(enter -1 to stop)30
enter x value(enter -1 to stop)40
enter x value(enter -1 to stop)50
enter x value(enter -1 to stop)-1
1:display
 2:count
 3:search
 4:insert_begin
 5:insert_end
6:insert_pos
 7:delete
 8:sort
 9:reverse
 10:exit
enter choice1
NULL<-|10|-><-|20|-><-|30|-><-|40|-><-|50|->NULLenter choice2
no.of nodes are 5enter choice3
enter ele to be searched10
10 ele is foundenter choice4
enter ele to be inserted15
NULL<-|15|-><-|10|-><-|20|-><-|30|-><-|40|-><-|50|->NULLenter choice5
enter ele to be inserted25
NULL<-|15|-><-|10|-><-|20|-><-|30|-><-|40|-><-|50|-><-|25|->NULLenter choice6
enter ele to be inserted35
enter pos to be inserted2
NULL<-|15|-><-|35|-><-|10|-><-|20|-><-|30|-><-|40|-><-|50|-><-|25|->NULLenter choice7
enter ele to be deleted35
NULL<-|15|-><-|10|-><-|20|-><-|30|-><-|40|-><-|50|-><-|25|->NULLenter choice8
NULL<-|10|-><-|15|-><-|20|-><-|25|-><-|30|-><-|40|-><-|50|->NULLenter choice9
NULL<-|50|-><-|40|-><-|30|-><-|25|-><-|20|-><-|15|-><-|10|->NULLenter choice10
